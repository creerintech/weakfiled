using DMS.DataModel;
using DMS.Utility;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class Masters_AddressedFromMaster : System.Web.UI.Page
{
    #region Private Variable

    CommanFunction Obj_Comm = new CommanFunction();

    DataSet Ds = new DataSet();
    private string StrCondition = string.Empty;
    private string StrError = string.Empty;
    private bool Flag = true;

    DMAddressedFrom obj_AddressedFrom = new DMAddressedFrom();

    #endregion

    #region  User Funtions

    private void MakeEmptyForm()
    {
        ViewState["EditId"] = null;
        HttpContext.Current.Cache["Dir"] = "";

        txtAddressedFrom.Text = string.Empty;
        TxtSearch.Text = string.Empty;

        BtnSave.Visible = true;
        BtnUpdate.Visible = false;
        BtnDelete.Visible = false;
        BtnCancel.Visible = true;
        ReportGrid("");
        txtAddressedFrom.Focus();
        //SetInitialRow();
    }

    public void ReportGrid(string RepCondition)
    {
        Ds = obj_AddressedFrom.FillReportGrid(RepCondition, out StrError);
        if (Ds.Tables.Count > 0 && Ds.Tables[0].Rows.Count > 0)
        {
            HttpContext.Current.Cache["Dir"] = Ds.Tables[0];
            GrdReport.DataSource = Ds.Tables[0];
            GrdReport.DataBind();
        }
        else
        {
            GrdReport.DataSource = null;
            GrdReport.DataBind();
        }
        obj_AddressedFrom = null;
        Ds = null;
    }

    private bool Check()
    {

        Ds = new DataSet();
        Flag = true;
        if (ViewState["EditID"] != null)
            Ds = obj_AddressedFrom.ChkDuplicate(txtAddressedFrom.Text, long.Parse(ViewState["EditID"].ToString()), out StrError);
        else
            Ds = obj_AddressedFrom.ChkDuplicate(txtAddressedFrom.Text, -1, out StrError);

        if (Ds.Tables.Count > 0)
        {
            if (Ds.Tables[0].Rows.Count > 0)
            {
                if (long.Parse(Ds.Tables[0].Rows[0][0].ToString()) > 0)
                {
                    Flag = false;
                    Obj_Comm.ShowPopUpMsg("AddressedFrom is Already Present..!", this.Page);
                    txtAddressedFrom.Text = string.Empty;
                }

            }
        }
        return Flag;
    }

    #endregion


    protected void Page_Load(object sender, EventArgs e)
    {
        if (!Page.IsPostBack)
        {

            MakeEmptyForm();
        }
    }
    protected void TxtSearch_TextChanged(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty((HttpContext.Current.Cache["Dir"]).ToString()))
        {
            DataTable DtNew = null;
        }
        else
        {
            DataTable DtNew = (DataTable)HttpContext.Current.Cache["Dir"];
            StrCondition = TxtSearch.Text.Trim();
            var query = from r in DtNew.AsEnumerable()
                        where (r.Field<string>("AddressedFrom")).Contains(StrCondition)
                        select r;
            if (query != null && query.Count() > 0)
            {
                DataTable DTNEW = query.CopyToDataTable();

                GrdReport.DataSource = DTNEW;
                GrdReport.DataBind();
            }
            else
            {
                GrdReport.DataSource = null;
                GrdReport.DataBind();
            }
        }
    }
    protected void BtnUpdate_Click(object sender, EventArgs e)
    {
        if (!Page.IsValid)

            return;

        int UpdateRow = 0;
        try
        {
            if (Check() == true)
            {
                UpdateRow = obj_AddressedFrom.UpdateAddressedFromMaster(txtAddressedFrom.Text.Trim(), long.Parse(ViewState["EditID"].ToString()), long.Parse((Session["UserID"]).ToString()), out StrError);
                if (UpdateRow > 0)
                {
                    Obj_Comm.ShowPopUpMsg("Record Updated Successfully", this.Page);
                    MakeEmptyForm();
                }

            }

        }
        catch (Exception ex) { throw new Exception(ex.Message); }
    }
    protected void BtnSave_Click(object sender, EventArgs e)
    {
        int InsertRow = 0;
        try
        {
            if (Check() == true)
            {
                InsertRow = obj_AddressedFrom.InsertAddressedFromMaster(txtAddressedFrom.Text.Trim(), long.Parse((Session["UserID"]).ToString()), out StrError);
                if (InsertRow > 0)
                {
                    Obj_Comm.ShowPopUpMsg("Record Saved Successfully", this.Page);
                    MakeEmptyForm();
                }

            }

        }

        catch (Exception ex) { throw new Exception(ex.Message); }
    }
    protected void BtnDelete_Click(object sender, EventArgs e)
    {
        try
        {
            long DeleteId = 0;
            if (ViewState["EditID"] != null)
            {
                if (long.Parse(hdnFldUsedCnt.Value.ToString()) > 0)
                {
                    Obj_Comm.ShowPopUpMsg("AddressedFrom is in use. Cannot Delete Record...", this.Page);
                    return;
                }
                DeleteId = Convert.ToInt32(ViewState["EditID"]);
            }
            if (DeleteId != 0)
            {
                int iDelete = obj_AddressedFrom.DeleteAddressedFromMaster(DeleteId, Convert.ToInt32(Session["UserId"]), out StrError);

                if (iDelete != 0)
                {
                    Obj_Comm.ShowPopUpMsg("Record Deleted Successfully..!", this.Page);
                    MakeEmptyForm();
                }

            }

            Obj_Comm = null;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
    protected void BtnCancel_Click(object sender, EventArgs e)
    {
        MakeEmptyForm();
    }

    [System.Web.Services.WebMethodAttribute(), System.Web.Script.Services.ScriptMethodAttribute()]
    public static string[] GetCompletionList(string prefixText, int count, string contextKey)
    {
        if (string.IsNullOrEmpty((HttpContext.Current.Cache["Dir"]).ToString()))
        {
            DataTable DtNew = null;
            return null;
        }
        else
        {
            DMSalutation obj_St = new DMSalutation();
            DataTable DtNew = (DataTable)HttpContext.Current.Cache["Dir"];
            var query = from r in DtNew.AsEnumerable()
                        where (r.Field<string>("AddressedFrom").ToLower()).Contains(prefixText.ToLower())
                        select (r.Field<string>("AddressedFrom"));
            string[] SearchList = query.ToArray();
            return SearchList;
        }
    }

    protected void GrdReport_ItemCommand(object source, RepeaterCommandEventArgs e)
    {
        try
        {
            switch (e.CommandName)
            {
                case ("Select"):
                    {
                        if (Convert.ToInt32(e.CommandArgument) != 0)
                        {

                            ViewState["EditID"] = Convert.ToInt32(e.CommandArgument);

                            LinkButton lnk = (LinkButton)e.Item.FindControl("lbtn_List");
                            Label lbl = (Label)e.Item.FindControl("lblUsedCnt");
                            if (lnk != null)
                            {
                                txtAddressedFrom.Text = lnk.Text.ToString();
                                hdnFldUsedCnt.Value = lbl.Text;
                            }
                            BtnUpdate.Visible = true;
                            BtnSave.Visible = false;
                            BtnDelete.Visible = true;
                        }

                        break;
                    }
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
}